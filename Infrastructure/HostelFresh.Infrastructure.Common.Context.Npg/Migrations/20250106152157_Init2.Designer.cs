// <auto-generated />
using System;
using HostelFresh.Infrastructure.Common.Context.Npg;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HostelFresh.Infrastructure.Common.Context.Npg.Migrations
{
    [DbContext(typeof(CommonContextNpg))]
    [Migration("20250106152157_Init2")]
    partial class Init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HostelFresh.Domain.Entities.Enterance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HostelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HostelId");

                    b.ToTable("Enterance");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Flat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EnteranceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnteranceId");

                    b.ToTable("Flat");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Hostel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Hostel");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HostelId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HostelId");

                    b.HasIndex("UserId");

                    b.ToTable("License");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HostelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("HostelId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.RatePaymentTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("MeasurementType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("RateId")
                        .HasColumnType("integer");

                    b.Property<double>("Tax")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("RateId");

                    b.ToTable("RatePaymentTax");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FlatId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxTenant")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex("FlatId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("500");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("500");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("NormilizedUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Enterance", b =>
                {
                    b.HasOne("HostelFresh.Domain.Entities.Hostel", "Hostel")
                        .WithMany("Enterances")
                        .HasForeignKey("HostelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hostel");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Flat", b =>
                {
                    b.HasOne("HostelFresh.Domain.Entities.Enterance", "Enterance")
                        .WithMany("Flats")
                        .HasForeignKey("EnteranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterance");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.License", b =>
                {
                    b.HasOne("HostelFresh.Domain.Entities.Hostel", "Hostel")
                        .WithMany("Licenses")
                        .HasForeignKey("HostelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostelFresh.Domain.Entities.User", "User")
                        .WithMany("Licenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hostel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Rate", b =>
                {
                    b.HasOne("HostelFresh.Domain.Entities.Hostel", "Hostel")
                        .WithMany("Rates")
                        .HasForeignKey("HostelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hostel");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.RatePaymentTax", b =>
                {
                    b.HasOne("HostelFresh.Domain.Entities.Rate", "Rate")
                        .WithMany("RatePaymentTaxes")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rate");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Room", b =>
                {
                    b.HasOne("HostelFresh.Domain.Entities.Flat", "Flat")
                        .WithMany("Rooms")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flat");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Tenant", b =>
                {
                    b.HasOne("HostelFresh.Domain.Entities.User", "User")
                        .WithOne("Tenant")
                        .HasForeignKey("HostelFresh.Domain.Entities.Tenant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Enterance", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Flat", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Hostel", b =>
                {
                    b.Navigation("Enterances");

                    b.Navigation("Licenses");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.Rate", b =>
                {
                    b.Navigation("RatePaymentTaxes");
                });

            modelBuilder.Entity("HostelFresh.Domain.Entities.User", b =>
                {
                    b.Navigation("Licenses");

                    b.Navigation("Tenant");
                });
#pragma warning restore 612, 618
        }
    }
}
